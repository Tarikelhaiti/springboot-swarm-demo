name: CI-CD Swarm

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Le pom repackage déjà => jar exécutable
      - name: Build app (Maven)
        working-directory: app
        run: mvn -q -DskipTests package

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ⚠️ Forcer owner/repo en minuscules pour le tag Docker
      - name: Compute image ref (lowercase)
        id: vars
        run: |
          OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}
          REPO_LC=${GITHUB_REPOSITORY#*/}
          REPO_LC=${REPO_LC,,}
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
          echo "REPO_LC=$REPO_LC" >> $GITHUB_ENV
          echo "IMAGE=${REGISTRY}/${OWNER_LC}/${REPO_LC}:latest" >> $GITHUB_ENV

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: ${{ env.IMAGE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy stack file to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/docker-stack.yml"
          target: "/home/${{ secrets.SSH_USER }}/"

      - name: Deploy to Swarm via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            OWNER_LC=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
            REPO_LC=$(echo "${GITHUB_REPOSITORY}" | cut -d/ -f2 | tr '[:upper:]' '[:lower:]')
            IMAGE="ghcr.io/${OWNER_LC}/${REPO_LC}:latest"

            docker login ghcr.io -u "${GITHUB_ACTOR}" -p "${GITHUB_TOKEN}"
            docker pull "${IMAGE}" || true

            # Ces 2 variables sont utilisées par docker-stack.yml (image: ghcr.io/${GITHUB_OWNER}/${REPO_NAME}:latest)
            export GITHUB_OWNER="${OWNER_LC}"
            export REPO_NAME="${REPO_LC}"

            docker stack deploy -c "/home/${SSH_USER}/deploy/docker-stack.yml" swarmdemo
            docker service ls
            docker service ps swarmdemo_app
        env:
          # Passer ces env au shell distant
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SSH_USER: ${{ secrets.SSH_USER }}
